// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  PREMIUM
  MODERATOR
  ADMIN
}

enum Gender {
  NONE
  MALE
  FEMALE
  OTHER
} 

enum TagType {
  NORMAL
  EXPLICIT
  FANFICTION
}

enum BookStatus {
  COMPLETED
  ONGOING
  ONAPPROVAL
  REJECTED
  NEEDADJUST
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @db.TinyText
  description String?  @db.TinyText
  type  TagType
  books Book[]
}

model Genre {
  id          Int      @id @default(autoincrement())
  name        String   @db.TinyText
  description String?  @db.TinyText 
  books       Book[]  
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   @db.Text
  birthday      DateTime? 
  gender        Gender    @default(NONE)
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  books         Book[]
  reviews       Review[]
  comments      Comment[]
}

model Book {
  id            String     @id @default(cuid())
  title         String     @db.Text
  synopsis      String     @db.Text
  cover         String     @db.Text
  status        BookStatus @default(ONAPPROVAL)
  tags          Tag[]
  genres        Genre[]
  author        User       @relation(fields: [authorid], references: [id])
  authorid      String         
  chapters      Chapter[]
  reviews       Review[]

  @@index([authorid])
}

model Chapter {
  id            String    @id @default(cuid())
  title         String    @db.Text
  content       String    @db.Text
  notes         String    @db.Text
  book          Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId        String
  comments      Comment[]
  
  @@index([bookId])
}

model Review {
  id            String    @id @default(cuid())
  overralRate   Int       @db.SmallInt
  content       String    @db.Text
  user          User      @relation(fields: [userId], references: [id])
  userId        String 
  book          Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId        String

  @@index([bookId])
  @@index([userId])
}

model Comment {
  id            String    @id @default(cuid())
  content       String    @db.Text
  user          User      @relation(fields: [userId], references: [id])
  userId        String 
  chapter       Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId     String

  @@index([chapterId])
  @@index([userId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}